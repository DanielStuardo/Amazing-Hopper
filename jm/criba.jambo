
#include <jambo.h>

Main
 //  Set break
   
   tiempo inicio = 0, tiempo final = 0

   
   
   nprimes=1000000, 
   //nprimes=990000, 
   nmax=0
   Let ( nmax :=  Ceil( Mul( nprimes, Sub( Add(Log(nprimes), Log(Log(nprimes))), 0.9385) ) ) )
   k=0
   Let( k := Div( Minus two 'nmax', 2) )
   
   Printnl("NMAX = ",nmax," K = ",k)
   a=0
   Set decimal '0'  // para un proceso SeqXXX es necesario esto, porque los números
                    // generados no son precisos mientras más larga es la secuencia.
//   Printnl({k} Mul by '2' Plus '1')
//   Printnl({k} Mul by '2' Plus '1' Div into '2')
   Seqspaced(3, {k} Mul by '2' Plus '1', {k} Mul by '2' Plus '1' Div into '2', a)
   Unset decimal
   Printnl("Secuencia inicial terminada.")
/*   Printnl("==", [1:30] Get 'a',"\nLen = ", Length(a))
   
   Clr all marks
   i=1
   Loop
       [i]
       Printnl(i," = ", Get 'a', " Type a = ", Type(Get 'a'), "; ", Eq(Get 'a',21))
       x=0, Let( x := Get 'a' )
       Break if ( Eq ( x, 37) )
       ++i
   While ( Less equal(i, 20 ) )
   Printnl("Pos=", i)
*/
//   Stop
   
   i=1
   pos inicial sumando=2
   pos ini factor = 2,/* factor factor = 2,*/ suma = 6

   sumando = 0 , factor = 0

   end subloop=0
   Tic( tiempo inicio )
   Loop
      
      //Let ( end subloop := 'k' Minus 'i'; 'i' Mul by '2' Plus '1', Div it )
      // aqui no se nota la diferencia de xxx-into, salvo en los arrays.
      Div-into ( 'k' Minus 'i', 'i' Mul by '2' Plus '1', end subloop )
     // Printnl( "END SUBLOOP = ", end subloop)
      
      
      //Sequence( pos inicial sumando, 1, end subloop, sumando )
      //Sequence( pos ini factor, pos inicial sumando/*factor factor*/, end subloop, factor )

      Get sequence( pos inicial sumando, 1, end subloop )
      Get sequence( pos ini factor, pos inicial sumando/*factor factor*/, end subloop )
      
      ---Add it--- //, Move to 'sumando'

      //Let ( sumando := Add( sumando, factor) )
      
      //Printnl( "sumando = ", [1:10] Get 'sumando')
      
      //Set range 'sumando', // las posiciones calculadas son el rango a limpiar.
      Get range  // usa el rango desde el stack. Se espera que el rango sea una variable,
                 // por lo que no se quitará desde la memoria hasta un kill (Forget en Jambo)
      Set '0', Put 'a'
      --- Forget ---  // para quitar el rango desde el stack. Debe ser bien preciso.
      //Clear 'sumando, factor', 
     // Clr range
      
      pos inicial sumando += 2  // 2,4,6,8...

      pos ini factor += suma  // 2, 8, 18, 32
      suma += 4      // 10, 14, 18
//      factor factor += 2   // 2,4,6,8 

   /*   j=i
      Loop
        [ {i}Plus(j);{i}Mulby(j);Mulby(2);Addit ]
        Set '0', Put 'a'
         ++j
      While ( Less equal( j, end subloop) ) */
      ++i
   While ( Less equal ( Mul( Mul( Plus one (i),i ),2), k ) )
   
   Toc( tiempo inicio, tiempo final )
   Clr range
   
  /* Visualización */
   Cls
   ta=0, 

   Compact-into 'a, a' //, Move to 'a'                   // elimino los ceros = compacto array
   [1:100]  Get-into 'a,ta' //, Move to 'ta', 
   //[1:100] Move positives from 'a' Into 'ta'
   Redim (ta, 10, 10)
   //Redim (ta,2,5)
   Setdecimal(0)
   Tok sep ("\t"), Print table 'ta' //'Int(ta)'
//   Printnl( "\n\nTime = ", tiempo final, " segs\n\n" )
   
   Clr interval, 
   Clear 'ta'
  
  /* imprimo el primo número "nprimes" */
   //value of a = 0
   //[ nprimes ] Get 'a', Move to 'value of a'
//   Setdecimal(0)
   Printnl("imprime resultado...")
   Print( nprimes, " th Sundaram prime is ", [ nprimes ] Get 'a', "\n" )
 // Setdecimal(0)
 //  Print( nprimes, " th Sundaram prime is ", [ nprimes ] Get positives from 'a' , "\n" )
   Unset decimal

//   [1:100] Get 'a', Move to 'ta', Redim (ta, 10, 10), Print table 'ta'
//   Clear 'ta'
//   Clr interval
   
/*   i=1, j=0
   Loop
      [i], value of a = 0
      If( Get 'a' --- Backup to 'value of a' --- )
          If ( Equals( Mod( j,10 ), 0 ) And( Less equal( j, 100 ) ) )
             Prnl
          End If
          ++j
          If( Less equal( j, 100 ) )
             Print( Lpad(" ", 4, Str(value of a)) )

          Else 
          If ( Equals( j, nprimes ) )
             Print( j, " th prime is ", Str(value of a), "\n" )
             Break
          End If
      End If
      ++i
   While ( Less equal( i, k ) ) */
   
   
   Printnl( "Time = ", tiempo final, " segs" )
End
/*
3	5	7	11	13	17	19	23	29	31
37	41	43	47	53	59	61	67	71	73
79	83	89	97	101	103	107	109	113	127
131	137	139	149	151	157	163	167	173	179
181	191	193	197	199	211	223	227	229	233
239	241	251	257	263	269	271	277	281	283
293	307	311	313	317	331	337	347	349	353
359	367	373	379	383	389	397	401	409	419
421	431	433	439	443	449	457	461	463	467
479	487	491	499	503	509	521	523	541	547
1000000 th Sundaram prime is 15485867
Time = 10.5158 segs

*/
/*
int main(void) {
    int nprimes =  1000000;
    int nmax = ceil(nprimes*(log(nprimes)+log(log(nprimes))-0.9385));  
      // should be larger than the last prime wanted; See
      // https://www.maa.org/sites/default/files/jaroma03200545640.pdf
    int i, j, m, k; int *a;
    k = (nmax-2)/2; 
    a = (int *)calloc(k + 1, sizeof(int));
    for(i = 0; i <= k; i++)a[i] = 2*i+1; 
    for (i = 1; (i+1)*i*2 <= k; i++)
        for (j = i; j <= (k-i)/(2*i+1); j++) {
            m = i + j + 2*i*j;
            if(a[m]) a[m] = 0;
            }            
        
    for (i = 1, j = 0; i <= k; i++) 
       if (a[i]) {
           if(j%10 == 0 && j <= 100)printf("\n");
           j++; 
           if(j <= 100)printf("%3d ", a[i]);
           else if(j == nprimes){
               printf("\n%d th prime is %d\n",j,a[i]);
               break;
               }
           }
    return 0;
}
*/
