#include <jambo.h>

#define NL  "\n"
#define TAB "\t"

/* Se demora menos trabajar con variables de entorno, a pesar de las transformaciones.
   Push interno de variables es lento.
   Las variables de entorno no ocupan un espacio en el stack de variables. 
   No obstante, es mejor usarlas con valores que permanecer√°n constantes la mayor
   parte del tiempo.*/

Main
  Set stack 16
  Set("1000"),Export( CODE )
  Init(x,i,t1,t2)
  Tic(t1)
  Loop
     Let( x := Nenv(CODE) Mulby(0.5))
     //Printnl( "Valor = ",x, ", Intento: ",i )
     ++i
  Back if ( var(i) Isleq(100) ) is true
  Toc(t1,t2)
  Printnl(" Time = ", t2 )
  Unset( CODE )

  Set("1000"),Export( CODE )
  Setenv("0.5", FACTOR)
  Tic(t1),i=0
  Loop
     Let( x := Mul( Nenv(CODE), Nenv(FACTOR) ))
     ++i
  Back if ( Leq(i,100) ) is true
  Toc(t1,t2)
  Printnl(" Time = ", t2 )
  Unset( CODE )
  
  Tic(t1)
  CODE=1000,i=0
  Loop
     Let( x := #( CODE * 0.5))
     //Printnl( "Valor = ",x, ", Intento: ",i )
     ++i
  Back if ( Leq(i,100) ) is true
  Toc(t1,t2)
  Printnl(" Time = ", t2 )

  Tic(t1)
  CODE=1000,i=0
  Loop
     Let( x := {CODE} Mulby(0.5))
     //Printnl( "Valor = ",x, ", Intento: ",i )
     ++i
  Back if ( Leq(i,100) ) is true
  Toc(t1,t2)
  Printnl(" Time = ", t2 )

// es LENTO: es mejor usar VARENV como valores constantes.
  ///Set("0"),Export( CODE )
  Setenv("0",CODE)  // alternativa a Export
  i=0
  Tic(t1)
  Loop
     Modenv( Str(i++), CODE )  
  Back if ( Leq(i,100) ) is true
  Toc(t1,t2)
  Printnl(" Time = ", t2, ", CODE= ",Nenv(CODE) )
  Unset( CODE )
End
